/**
 * VERCEL DEVELOPMENT DEPLOY
 * ==============================
 * 
 * Detta skript hj√§lper till att f√∂rbereda och deploya till Vercel fr√•n en lokal utvecklingsmilj√∂.
 * Det fokuserar p√• att hantera milj√∂variabler och databasmigrationer p√• ett p√•litligt s√§tt.
 * 
 * K√∂r med Node.js:
 * 
 * node scripts/vercel-dev-deploy.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// L√§s .env filen
dotenv.config();

const ENV_VARS_TO_SET = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'EMAIL_SERVER_USER',
    'EMAIL_SERVER_PASSWORD',
    'EMAIL_SERVER_HOST',
    'EMAIL_SERVER_PORT',
    'EMAIL_FROM',
    'NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_MONTHLY',
    'NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_YEARLY'
];

// Skapa en tempor√§r .env.vercel f√∂r anv√§ndning med Vercel CLI
function createTempVercelEnv() {
    console.log('üîß Skapar tempor√§r .env.vercel fil...');

    const envContent = ENV_VARS_TO_SET
        .filter(key => process.env[key])
        .map(key => `${key}=${process.env[key]}`)
        .join('\n');

    fs.writeFileSync('.env.vercel', envContent, 'utf8');
    console.log('‚úÖ Skapade .env.vercel med f√∂ljande variabler:');
    console.log(ENV_VARS_TO_SET.filter(key => process.env[key]).map(key => `- ${key}`).join('\n'));
}

// St√§da upp den tempor√§ra filen
function cleanupTempFile() {
    console.log('üßπ St√§dar upp tempor√§ra filer...');
    if (fs.existsSync('.env.vercel')) {
        fs.unlinkSync('.env.vercel');
    }
    console.log('‚úÖ St√§dning klar');
}

async function deploy() {
    console.log('====================================================');
    console.log('üöÄ STARTAR VERCEL DEVELOPMENT DEPLOYMENT üöÄ');
    console.log('====================================================');

    try {
        // Skapa tempor√§r milj√∂fil
        createTempVercelEnv();

        // Commit lokala √§ndringar i git
        console.log('üîÑ L√§gger till alla filer till git...');
        try {
            execSync('git add .', { stdio: 'inherit' });
            execSync('git commit -m "F√∂rbereder f√∂r Vercel deployment"', { stdio: 'inherit' });
            console.log('‚úÖ Git commit skapad');
        } catch (error) {
            console.log('‚ö†Ô∏è Git commit misslyckades, forts√§tter √§nd√•...');
            // Vi forts√§tter √§nd√•, det kanske inte fanns n√•gra √§ndringar
        }

        // Deploya till Vercel med milj√∂variabler
        console.log('üîÑ Deploying to Vercel...');
        try {
            execSync('vercel --env-file=.env.vercel --prod', { stdio: 'inherit' });
            console.log('‚úÖ Deployment till Vercel slutf√∂rd!');
        } catch (error) {
            console.error('‚ùå Vercel deployment misslyckades:', error);
            throw error;
        }

        console.log('\n‚úÖ DEPLOYMENT PROCESSEN SLUTF√ñRD');
        console.log('====================================================');
        console.log('üåê K√∂r nu f√∂ljande f√∂r post-deploy setup p√• Vercel:');
        console.log('vercel run post-deploy');
        console.log('====================================================');
    } catch (error) {
        console.error('‚ùå Deployment misslyckades:', error);
    } finally {
        cleanupTempFile();
    }
}

deploy(); 