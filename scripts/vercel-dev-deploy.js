/**
 * VERCEL DEVELOPMENT DEPLOY
 * ==============================
 * 
 * Detta skript hj√§lper till att f√∂rbereda och deploya till Vercel fr√•n en lokal utvecklingsmilj√∂.
 * Det fokuserar p√• att hantera milj√∂variabler och databasmigrationer p√• ett p√•litligt s√§tt.
 * 
 * K√∂r med Node.js:
 * 
 * node scripts/vercel-dev-deploy.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const readline = require('readline');

// L√§s .env filen
dotenv.config();

const ENV_VARS_TO_SET = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'EMAIL_SERVER_USER',
    'EMAIL_SERVER_PASSWORD',
    'EMAIL_SERVER_HOST',
    'EMAIL_SERVER_PORT',
    'EMAIL_FROM',
    'NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_MONTHLY',
    'NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_YEARLY'
];

// Skapa en rl interface f√∂r anv√§ndarinput
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Fr√•ga anv√§ndaren om information
function askQuestion(question) {
    return new Promise(resolve => {
        rl.question(question, answer => {
            resolve(answer);
        });
    });
}

async function deploy() {
    console.log('====================================================');
    console.log('üöÄ STARTAR VERCEL DEVELOPMENT DEPLOYMENT üöÄ');
    console.log('====================================================');

    try {
        // Commit lokala √§ndringar i git
        console.log('üîÑ L√§gger till alla filer till git...');
        try {
            execSync('git add .', { stdio: 'inherit' });
            execSync('git commit -m "F√∂rbereder f√∂r Vercel deployment"', { stdio: 'inherit' });
            console.log('‚úÖ Git commit skapad');
        } catch (error) {
            console.log('‚ö†Ô∏è Git commit misslyckades, forts√§tter √§nd√•...');
            // Vi forts√§tter √§nd√•, det kanske inte fanns n√•gra √§ndringar
        }

        // Fr√•ga anv√§ndaren om de vill skapa en ny projektinstans eller anv√§nda en befintlig
        const useExisting = await askQuestion('Vill du anv√§nda ett befintligt Vercel-projekt? (y/n): ');

        if (useExisting.toLowerCase() === 'y') {
            // K√∂r normal vercel deploy
            console.log('üîÑ Deploying till befintligt Vercel-projekt...');
            try {
                execSync('vercel --prod', { stdio: 'inherit' });
                console.log('‚úÖ Deployment till Vercel slutf√∂rd!');
            } catch (error) {
                console.error('‚ùå Vercel deployment misslyckades:', error);
                throw error;
            }
        } else {
            // Skapa nytt projekt och st√§ll fr√•gor om milj√∂variabler
            console.log('üîÑ Skapar nytt Vercel-projekt...');

            // Skapa projektet
            try {
                execSync('vercel', { stdio: 'inherit' });
                console.log('‚úÖ Vercel-projekt skapat!');
            } catch (error) {
                console.error('‚ùå Vercel projekt skapande misslyckades:', error);
                throw error;
            }

            // Fr√•ga om anv√§ndaren vill konfigurera milj√∂variabler
            const setupEnv = await askQuestion('Vill du konfigurera milj√∂variabler f√∂r projektet? (y/n): ');

            if (setupEnv.toLowerCase() === 'y') {
                console.log('ÔøΩÔøΩ Konfigurerar milj√∂variabler...');

                for (const envVar of ENV_VARS_TO_SET) {
                    if (process.env[envVar]) {
                        console.log(`St√§ller in ${envVar}...`);
                        // St√§nger inte rl h√§r eftersom vi beh√∂ver den f√∂r n√§sta iteration
                        try {
                            execSync(`echo "${process.env[envVar]}" | vercel env add ${envVar} production`, { stdio: 'inherit' });
                            console.log(`‚úÖ ${envVar} konfigurerad`);
                        } catch (error) {
                            console.log(`‚ö†Ô∏è Kunde inte konfigurera ${envVar}: ${error.message}`);
                        }
                    }
                }

                console.log('‚úÖ Milj√∂variabler konfigurerade');

                // K√∂r deployment igen med de nya milj√∂variablerna
                console.log('üîÑ Deploying med nya milj√∂variabler...');
                try {
                    execSync('vercel --prod', { stdio: 'inherit' });
                    console.log('‚úÖ Deployment till Vercel slutf√∂rd!');
                } catch (error) {
                    console.error('‚ùå Vercel deployment misslyckades:', error);
                    throw error;
                }
            }
        }

        console.log('\n‚úÖ DEPLOYMENT PROCESSEN SLUTF√ñRD');
        console.log('====================================================');
        console.log('üåê K√∂r nu f√∂ljande f√∂r post-deploy setup p√• Vercel:');
        console.log('vercel run post-deploy');
        console.log('====================================================');
    } catch (error) {
        console.error('‚ùå Deployment misslyckades:', error);
    } finally {
        rl.close();
    }
}

deploy(); 