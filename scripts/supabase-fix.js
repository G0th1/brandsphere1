// Supabase-Prisma Fix - Kritiskt f√∂r IPv4/IPv6 problem
require('dotenv').config();
const { exec } = require('child_process');
const fs = require('fs');
const { PrismaClient } = require('@prisma/client');

console.log(`
======================================================
üö® KRITISK DIAGNOSTIK: SUPABASE POSTGRESQL ANSLUTNING üö®
======================================================
`);

// 1. KONTROLLERA PRISMA KONFIGURATION
console.log('STEG 1: PRISMA SCHEMA ANALYS');
console.log('----------------------------');

let prismaSchema;
try {
    prismaSchema = fs.readFileSync('./prisma/schema.prisma', 'utf8');
    console.log('‚úÖ Kunde l√§sa schema.prisma');

    // Kontrollera om det anv√§nder r√§tt milj√∂variabler
    if (prismaSchema.includes('url = env("POSTGRES_PRISMA_URL")')) {
        console.log('‚úÖ Schema anv√§nder POSTGRES_PRISMA_URL (korrekt)');
    } else if (prismaSchema.includes('url = env("DATABASE_URL")')) {
        console.error('‚ùå Schema anv√§nder DATABASE_URL ist√§llet f√∂r POSTGRES_PRISMA_URL');
        console.log('üîÑ Korrigering kr√§vs i schema.prisma');
    }

    // Kontrollera om directUrl √§r konfigurerad
    if (prismaSchema.includes('directUrl = env("POSTGRES_URL_NON_POOLING")')) {
        console.log('‚úÖ Schema anv√§nder POSTGRES_URL_NON_POOLING (korrekt)');
    } else {
        console.error('‚ùå Schema saknar directUrl konfiguration');
        console.log('üîÑ Korrigering kr√§vs i schema.prisma');
    }

} catch (err) {
    console.error('‚ùå Kunde inte l√§sa schema.prisma:', err.message);
}

// 2. KONTROLLERA MILJ√ñVARIABLER
console.log('\nSTEG 2: MILJ√ñVARIABELANALYS');
console.log('---------------------------');

const criticalEnvVars = [
    { name: 'POSTGRES_PRISMA_URL', fallback: 'DATABASE_URL' },
    { name: 'POSTGRES_URL_NON_POOLING', fallback: 'DATABASE_URL' },
    { name: 'POSTGRES_URL', fallback: 'DATABASE_URL' }
];

let fixApplied = false;

criticalEnvVars.forEach(envVar => {
    const value = process.env[envVar.name];
    const fallbackValue = process.env[envVar.fallback];

    if (value) {
        console.log(`‚úÖ ${envVar.name}: Konfigurerad`);
        // Kontrollera om v√§rdet pekar p√• localhost
        if (value.includes('localhost') || value.includes('127.0.0.1')) {
            console.error(`‚ö†Ô∏è ${envVar.name} pekar p√• lokal databas: ${value}`);
            console.log('   Detta fungerar INTE i produktion p√• Vercel!');
        }
    } else {
        console.error(`‚ùå ${envVar.name}: SAKNAS`);

        if (fallbackValue) {
            console.log(`‚ÑπÔ∏è Fallback ${envVar.fallback} finns: ${fallbackValue}`);
            // Automatiskt korrigera variabeln i runtime-milj√∂n
            process.env[envVar.name] = fallbackValue;
            console.log(`üîÑ Runtime-fix: ${envVar.name} = ${fallbackValue}`);
            fixApplied = true;
        } else {
            console.error(`‚ùå Ingen fallback hittades f√∂r ${envVar.name}`);
        }
    }
});

if (fixApplied) {
    console.log('\n‚úÖ Runtime-fix har applicerats f√∂r att f√∂rs√∂ka l√∂sa anslutningsproblem');
}

// 3. TESTA DATABASANSLUTNING
console.log('\nSTEG 3: DATABASANSLUTNINGSTEST');
console.log('------------------------------');

(async () => {
    const prisma = new PrismaClient();

    try {
        console.log('üîÑ F√∂rs√∂ker ansluta till Supabase PostgreSQL...');
        const result = await prisma.$queryRaw`SELECT current_database(), current_user, version()`;
        console.log('‚úÖ ANSLUTNING LYCKADES!');
        console.log('üìä Databasinfo:', result);

        // Prova att h√§mta anv√§ndardata
        try {
            console.log('\nüîÑ F√∂rs√∂ker fr√•ga efter anv√§ndartabellen...');
            const userCount = await prisma.user.count();
            console.log(`‚úÖ Kunde fr√•ga User-tabellen. Antal anv√§ndare: ${userCount}`);
        } catch (userError) {
            console.error('‚ùå Kunde inte fr√•ga User-tabellen:', userError.message);

            if (userError.message.includes('relation "User" does not exist')) {
                console.error('üîç KRITISKT FEL: User-tabellen existerar inte i databasen!');
                console.log('üîß L√ñSNING: K√∂r `npx prisma db push` f√∂r att skapa tabellerna');
            } else if (userError.message.includes('permission denied')) {
                console.error('üîç KRITISKT FEL: Saknar beh√∂righet till databasen!');
                console.log('üîß L√ñSNING: Kontrollera dina Supabase beh√∂righeter');
            }
        }

    } catch (error) {
        console.error('‚ùå KRITISKT ANSLUTNINGSFEL:', error.message);

        // Specifik diagnos baserat p√• feltyp
        if (error.message.includes('P1001')) {
            console.error('üîç DIAGNOS: Kan inte ansluta till databasen. Kontrollera URL och n√§tverk.');
            console.log('üîß L√ñSNING: Verifiera att Supabase-URL √§r korrekt och att du anv√§nder IPv4.');
        }
        else if (error.message.includes('P1003')) {
            console.error('üîç DIAGNOS: Databasen eller schemat finns inte.');
            console.log('üîß L√ñSNING: K√∂r `npx prisma db push` f√∂r att skapa tabellerna');
        }
        else if (error.message.includes('P1017')) {
            console.error('üîç DIAGNOS: Server nekade anslutning. Sannolikt fel l√∂senord.');
            console.log('üîß L√ñSNING: Kontrollera databasens anv√§ndarnamn och l√∂senord');
        }
        else if (error.message.includes('timeout')) {
            console.error('üîç DIAGNOS: Anslutningen n√•dde timeout.');
            console.log('üîß L√ñSNING: Kontrollera brandv√§ggsregler eller anv√§nd IPv4 explicit');
        }
    } finally {
        await prisma.$disconnect();
    }
})();

// 4. REKOMMENDATIONER F√ñR SUPABASE POSTGRESQL P√Ö VERCEL
console.log('\nSTEG 4: REKOMMENDATIONER');
console.log('------------------------');

console.log(`
1Ô∏è‚É£ VIKTIG √ÖTG√ÑRD: Anv√§nd Supabase Integration fr√•n Vercel Marketplace
   - G√• till https://vercel.com/dashboard
   - V√§lj ditt projekt -> Integrations -> Browse Marketplace
   - S√∂k efter "Supabase" och installera integrationen
   - Detta l√§gger automatiskt till r√§tt milj√∂variabler

2Ô∏è‚É£ MANUELLA MILJ√ñVARIABLER: Om du inte anv√§nder integrationen
   - POSTGRES_PRISMA_URL=postgresql://postgres:[PASSWORD]@[HOST]:5432/postgres
   - POSTGRES_URL_NON_POOLING=postgresql://postgres:[PASSWORD]@[HOST]:5432/postgres?connect_timeout=30
   
3Ô∏è‚É£ PRISMA SCHEMA: Uppdatera schema.prisma
   datasource db {
     provider = "postgresql"
     url      = env("POSTGRES_PRISMA_URL")
     directUrl = env("POSTGRES_URL_NON_POOLING")
   }

4Ô∏è‚É£ MIGRATIONER: K√∂r efter att milj√∂variabler √§r uppdaterade
   - npx prisma db push

5Ô∏è‚É£ KRITISKT F√ñR VERCEL: IPv4/IPv6 kompatibilitet
   Supabase har migrerat till IPv6 men Vercel st√∂der bara IPv4.
   Anv√§nd Supavisor URLs (som tillhandah√•lls via Vercel-integration)
   som st√∂der IPv4-anslutning.
`); 