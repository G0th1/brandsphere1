/**
 * DEPLOY HOOK SKRIPT
 * ==============================
 * 
 * Detta skript k√∂rs automatiskt efter en framg√•ngsrik deployment p√• Vercel.
 * Det k√∂r databasmigreringar och s√§tter upp produktionsmilj√∂n.
 * 
 * Konfigurera detta i Vercel som en deploy hook: 
 * https://vercel.com/[username]/[project]/settings/git/deploy-hooks
 * 
 * node scripts/deploy-hook.js
 */

const { execSync } = require('child_process');
const { PrismaClient } = require('@prisma/client');
const dotenv = require('dotenv');

// Ladda milj√∂variabler
dotenv.config({ path: '.env.production' });
console.log('Laddade milj√∂variabler fr√•n .env.production');

async function runDeploymentTasks() {
    console.log('====================================================');
    console.log('üöÄ K√ñR DEPLOYMENT UPPGIFTER üöÄ');
    console.log('====================================================');

    try {
        // K√∂r databasmigreringar
        console.log('üîÑ K√∂r databasmigreringar...');
        try {
            execSync('npx prisma migrate deploy', { stdio: 'inherit' });
            console.log('‚úÖ Databasmigreringar slutf√∂rda');
        } catch (error) {
            console.error('‚ùå Fel vid k√∂rning av databasmigreringar:', error);
            // Vi forts√§tter √§nd√• eftersom databasschemat kanske redan √§r uppdaterat
        }

        // K√∂r produktionsf√∂rberedelser
        console.log('üîÑ K√∂r produktionsf√∂rberedelser...');

        // Skapa en prisma klient
        const prisma = new PrismaClient();

        try {
            // Kontrollera anslutningen
            const result = await prisma.$queryRaw`SELECT 1 as test`;
            console.log('‚úÖ Databasanslutning fungerar:', result);

            // Importera och k√∂r setup-script
            console.log('üîÑ Importerar och k√∂r setup-script...');
            const setupProduction = require('./setup-production');
            // Detta k√∂rs automatiskt n√§r filen importeras

            console.log('‚úÖ Produktionsf√∂rberedelser slutf√∂rda');
        } catch (error) {
            console.error('‚ùå Fel vid k√∂rning av produktionsf√∂rberedelser:', error);
        } finally {
            await prisma.$disconnect();
        }

        console.log('\n‚úÖ DEPLOYMENT UPPGIFTER SLUTF√ñRDA');
        console.log('====================================================');
    } catch (error) {
        console.error('‚ùå CRITICAL ERROR:', error);
        process.exit(1);
    }
}

runDeploymentTasks(); 