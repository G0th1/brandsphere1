/**
 * PRODUCTION SETUP SCRIPT
 * =======================
 * 
 * Detta skript k√∂rs efter en framg√•ngsrik deployment f√∂r att s√§tta upp 
 * produktionsmilj√∂n, inklusive databasmigrationer och testanv√§ndare.
 * 
 * K√∂r med:
 * node scripts/setup-production.js
 */

const { PrismaClient } = require('@prisma/client');
const { hash } = require('bcrypt');

// Skapa en Prisma-klient med direkt anslutning f√∂r att undvika pool-problem
const prisma = new PrismaClient({
    datasources: {
        db: {
            url: process.env.POSTGRES_URL_NON_POOLING || process.env.DATABASE_URL
        }
    },
    log: ['query', 'info', 'warn', 'error']
});

async function main() {
    console.log('====================================================');
    console.log('üöÄ KONFIGURERAR PRODUKTIONSMILJ√ñ üöÄ');
    console.log('====================================================');
    console.log('Milj√∂variabler:');
    console.log('- DATABASE_URL: ' + (process.env.DATABASE_URL ? '‚úÖ Inst√§lld' : '‚ùå Saknas'));
    console.log('- POSTGRES_URL_NON_POOLING: ' + (process.env.POSTGRES_URL_NON_POOLING ? '‚úÖ Inst√§lld' : '‚ùå Saknas'));
    console.log('- NEXTAUTH_URL: ' + (process.env.NEXTAUTH_URL ? '‚úÖ Inst√§lld' : '‚ùå Saknas'));
    console.log('- NEXTAUTH_SECRET: ' + (process.env.NEXTAUTH_SECRET ? '‚úÖ Inst√§lld' : '‚ùå Saknas'));

    try {
        // Verifiera databaskoppling
        console.log('üîÑ Testar databasanslutningen...');
        try {
            const testResult = await prisma.$queryRaw`SELECT 1 as test`;
            console.log('‚úÖ Databasanslutningen fungerar:', testResult);
        } catch (dbError) {
            console.error('‚ùå Kunde inte ansluta till databasen:', dbError);
            console.log('üîç Databasanslutningsstr√§ng som anv√§nds:');
            console.log(process.env.POSTGRES_URL_NON_POOLING || process.env.DATABASE_URL);
            throw new Error('Databasanslutningsfel: ' + dbError.message);
        }

        // K√∂r databasmigrationer
        console.log('üîÑ Kontrollerar om databasmigrationer beh√∂vs...');

        // Kontrollera om det finns anv√§ndare i databasen
        const userCount = await prisma.user.count();
        console.log(`‚ÑπÔ∏è Antal befintliga anv√§ndare: ${userCount}`);

        // Skapa testanv√§ndare om det inte finns n√•gra
        if (userCount === 0) {
            console.log('üîÑ Skapar admin-anv√§ndare...');

            try {
                const hashedPassword = await hash('Admin123!', 10);

                const admin = await prisma.user.create({
                    data: {
                        name: 'Admin User',
                        email: 'admin@example.com',
                        password: hashedPassword,
                        emailVerified: new Date(),
                    }
                });

                console.log('‚úÖ Admin-anv√§ndare skapad:');
                console.log(`üìß E-post: ${admin.email}`);
                console.log(`üîë L√∂senord: Admin123!`);

                // Skapa prenumeration f√∂r admin
                await prisma.subscription.create({
                    data: {
                        userId: admin.id,
                        plan: 'Business',
                        status: 'active',
                        stripeCustomerId: 'demo_customer_id',
                        stripeSubscriptionId: 'demo_subscription_id',
                        stripePriceId: 'demo_price_id',
                        stripeCurrentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dagar fram√•t
                    }
                });

                console.log('‚úÖ Business-prenumeration skapad f√∂r admin');

                // Skapa testanv√§ndare
                const testUser = await prisma.user.create({
                    data: {
                        name: 'Test User',
                        email: 'test@example.com',
                        password: await hash('Password123', 10),
                        emailVerified: new Date(),
                    }
                });

                console.log('‚úÖ Testanv√§ndare skapad:');
                console.log(`üìß E-post: ${testUser.email}`);
                console.log(`üîë L√∂senord: Password123`);

                // Skapa enkel prenumeration f√∂r testanv√§ndare
                await prisma.subscription.create({
                    data: {
                        userId: testUser.id,
                        plan: 'Free',
                        status: 'active',
                    }
                });

                console.log('‚úÖ Free-prenumeration skapad f√∂r testanv√§ndare');

            } catch (userCreateError) {
                console.error('‚ùå Fel vid skapande av anv√§ndare:', userCreateError);
                throw new Error('Anv√§ndarskapsfel: ' + userCreateError.message);
            }
        } else {
            console.log('‚ÑπÔ∏è Anv√§ndare finns redan i databasen, hoppar √∂ver skapande av testanv√§ndare');

            // Listar befintliga anv√§ndare f√∂r diagnostik
            const users = await prisma.user.findMany({
                select: {
                    id: true,
                    email: true,
                    name: true,
                    subscription: {
                        select: {
                            plan: true,
                            status: true
                        }
                    }
                }
            });

            console.log('üìã Befintliga anv√§ndare:');
            users.forEach((user, index) => {
                console.log(`üë§ Anv√§ndare #${index + 1}:`);
                console.log(`  ID: ${user.id}`);
                console.log(`  Namn: ${user.name || 'Ej angivet'}`);
                console.log(`  E-post: ${user.email}`);
                if (user.subscription) {
                    console.log(`  Plan: ${user.subscription.plan}`);
                    console.log(`  Status: ${user.subscription.status}`);
                } else {
                    console.log(`  Prenumeration: Ingen`);
                }
                console.log('---');
            });
        }

        console.log('====================================================');
        console.log('‚úÖ PRODUKTIONSMILJ√ñN √ÑR NU KONFIGURERAD');
        console.log('====================================================');
        console.log('üìù SAMMANFATTNING:');
        console.log('- Databasanslutning verifierad');
        if (userCount === 0) {
            console.log('- Admin-anv√§ndare skapad');
            console.log('- Testanv√§ndare skapad');
            console.log('- Prenumerationer konfigurerade');
        } else {
            console.log('- Befintliga anv√§ndare hittades, ingen testanv√§ndare skapades');
        }
        console.log('====================================================');
        console.log('üåê Du kan nu logga in p√•:');
        console.log(process.env.NEXT_PUBLIC_SITE_URL || process.env.NEXTAUTH_URL || 'https://brandsphere1-htv4iy7vc-g0th1s-projects.vercel.app');
        console.log('====================================================');

    } catch (error) {
        console.error('‚ùå Ett fel uppstod vid konfigurering av produktionsmilj√∂n:', error);
        console.error('Stacksp√•rning:', error.stack);
        process.exit(1);
    } finally {
        await prisma.$disconnect().catch(e => console.error('Fel vid fr√•nkoppling fr√•n databasen:', e));
    }
}

// K√∂r huvudfunktionen
main(); 