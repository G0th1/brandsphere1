/**
 * SKAPA TESTANV√ÑNDARE I NEXTAUTH
 * ==============================
 * 
 * Detta script skapar en testanv√§ndare direkt i NextAuth-databasen.
 * K√∂r med Node.js:
 * 
 * node scripts/create-test-user.js
 */

const fs = require('fs');
const dotenv = require('dotenv');
const { PrismaClient } = require('@prisma/client');
const { hash } = require('bcrypt');

// Ladda milj√∂variabler fr√•n .env.local om den finns, annars fr√•n .env
const envPath = fs.existsSync('.env.local') ? '.env.local' : '.env';
dotenv.config({ path: envPath });
console.log(`Laddar milj√∂variabler fr√•n ${envPath}`);

// Skapa Prisma-klient
const prisma = new PrismaClient();

async function createTestUser() {
    console.log('üîÑ Skapar testanv√§ndare i NextAuth-databasen...');

    try {
        // Skapa testanv√§ndare
        const email = 'test@example.com';
        const password = 'password123';
        const hashedPassword = await hash(password, 10);

        // Kontrollera om anv√§ndaren redan finns
        const existingUser = await prisma.user.findUnique({
            where: { email },
        });

        if (existingUser) {
            console.log(`‚ÑπÔ∏è Anv√§ndare ${email} finns redan i databasen.`);

            // Uppdatera l√∂senordet
            await prisma.user.update({
                where: { id: existingUser.id },
                data: {
                    password: hashedPassword,
                    emailVerified: new Date(),
                }
            });

            console.log(`‚úÖ Uppdaterade l√∂senord f√∂r anv√§ndare ${email}.`);
        } else {
            // Skapa ny anv√§ndare
            const newUser = await prisma.user.create({
                data: {
                    email,
                    name: 'Test User',
                    password: hashedPassword,
                    emailVerified: new Date(), // Markera som verifierad
                }
            });

            console.log(`‚úÖ Skapade ny anv√§ndare ${email} med ID: ${newUser.id}`);

            // Skapa prenumeration f√∂r anv√§ndaren
            await prisma.subscription.create({
                data: {
                    userId: newUser.id,
                    plan: "Free",
                    status: "active",
                    billingCycle: "monthly",
                }
            });

            console.log(`‚úÖ Skapade prenumeration f√∂r anv√§ndare ${email}.`);
        }

        console.log('\nüéâ Testanv√§ndare skapad!');
        console.log('\nAnv√§ndaruppgifter:');
        console.log(`E-post: ${email}`);
        console.log(`L√∂senord: ${password}`);
        console.log('\nDu kan nu logga in med dessa uppgifter.');

    } catch (error) {
        console.error('‚ùå Kunde inte skapa testanv√§ndare:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// K√∂r funktionen
createTestUser(); 