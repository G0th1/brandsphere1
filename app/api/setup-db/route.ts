import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { hash } from "bcrypt";
import { execSync } from "child_process";

export const dynamic = "force-dynamic";
export const runtime = "nodejs";

export async function GET() {
    try {
        console.log("üîç API: K√∂r databaskonfiguration");
        console.log("Milj√∂varibler f√∂r databas:");
        console.log("- DATABASE_URL:", process.env.DATABASE_URL ? "Inst√§lld" : "Saknas");
        console.log("- POSTGRES_PRISMA_URL:", process.env.POSTGRES_PRISMA_URL ? "Inst√§lld" : "Saknas");
        console.log("- POSTGRES_URL_NON_POOLING:", process.env.POSTGRES_URL_NON_POOLING ? "Inst√§lld" : "Saknas");

        // Skapa en Prisma-klient med direktanslutning
        const prisma = new PrismaClient({
            datasources: {
                db: {
                    url: process.env.POSTGRES_URL_NON_POOLING || process.env.DATABASE_URL
                }
            }
        });

        // Testa grundl√§ggande anslutning
        console.log("üîÑ Testar databasanslutning...");
        const testResult = await prisma.$queryRaw`SELECT 1 as test`;
        console.log("‚úÖ Databasanslutningstest lyckades:", testResult);

        // F√∂rs√∂ker k√∂ra databasmigrering
        console.log("üîÑ K√∂r databasmigrering...");
        try {
            // Kolla om User-tabellen finns
            const tablesExist = await prisma.$queryRaw`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'User'
        );
      `;

            console.log("Tabellkontroll:", tablesExist);

            if (!tablesExist[0].exists) {
                console.log("üîÑ Anv√§ndartabellen existerar inte, k√∂r databasinitialisering...");

                // Skapa anv√§ndartabeller direkt via SQL f√∂r enklare kontroll
                await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS "User" (
            id TEXT PRIMARY KEY,
            name TEXT,
            email TEXT UNIQUE NOT NULL,
            "emailVerified" TIMESTAMP,
            password TEXT,
            image TEXT,
            "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP NOT NULL
          );
          
          CREATE TABLE IF NOT EXISTS "Subscription" (
            id TEXT PRIMARY KEY,
            "userId" TEXT UNIQUE NOT NULL,
            "stripeCustomerId" TEXT UNIQUE,
            "stripeSubscriptionId" TEXT UNIQUE,
            "stripePriceId" TEXT,
            "stripeCurrentPeriodEnd" TIMESTAMP,
            status TEXT NOT NULL DEFAULT 'inactive',
            plan TEXT NOT NULL DEFAULT 'Free',
            "billingCycle" TEXT NOT NULL DEFAULT 'monthly',
            "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" TIMESTAMP NOT NULL,
            FOREIGN KEY ("userId") REFERENCES "User"(id) ON DELETE CASCADE
          );
        `;

                console.log("‚úÖ Bastabeller skapade");
            } else {
                console.log("‚úÖ Tabeller finns redan");
            }
        } catch (migrationError) {
            console.error("‚ö†Ô∏è Fel vid migrering:", migrationError);
        }

        // Kontrollera om det finns anv√§ndare
        console.log("üîÑ Kontrollerar anv√§ndare...");
        const userCount = await prisma.user.count();
        console.log(`‚ÑπÔ∏è Antal anv√§ndare i databasen: ${userCount}`);

        // Skapa en testanv√§ndare om det beh√∂vs
        if (userCount === 0) {
            console.log("üîÑ Skapar testanv√§ndare...");

            try {
                // Skapa admin
                const admin = await prisma.user.create({
                    data: {
                        id: "admin-" + Date.now().toString(),
                        name: "Admin User",
                        email: "admin@example.com",
                        password: await hash("Admin123!", 10),
                        emailVerified: new Date(),
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                });

                console.log("‚úÖ Admin-anv√§ndare skapad:", admin.id);

                // Skapa prenumeration
                await prisma.subscription.create({
                    data: {
                        id: "sub-" + Date.now().toString(),
                        userId: admin.id,
                        plan: "Business",
                        status: "active",
                        billingCycle: "monthly",
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                });

                console.log("‚úÖ Prenumeration skapad f√∂r admin");
            } catch (userError) {
                console.error("‚ùå Fel vid skapande av anv√§ndare:", userError);
            }
        }

        // H√§mta anv√§ndare f√∂r att verifiera
        const users = await prisma.user.findMany({
            select: {
                id: true,
                email: true,
                name: true
            }
        });

        // St√§ng anslutningen
        await prisma.$disconnect();

        // Returnera diagnostisk information
        return NextResponse.json({
            success: true,
            message: "Databaskonfiguration slutf√∂rd",
            connectionTest: testResult,
            userCount,
            users,
            databaseVariables: {
                DATABASE_URL: process.env.DATABASE_URL ? "Inst√§lld" : "Saknas",
                POSTGRES_PRISMA_URL: process.env.POSTGRES_PRISMA_URL ? "Inst√§lld" : "Saknas",
                POSTGRES_URL_NON_POOLING: process.env.POSTGRES_URL_NON_POOLING ? "Inst√§lld" : "Saknas",
            }
        });
    } catch (error) {
        console.error("‚ùå Fel vid databaskonfiguration:", error);
        return NextResponse.json(
            {
                success: false,
                error: error.message,
                stack: error.stack,
            },
            { status: 500 }
        );
    }
} 