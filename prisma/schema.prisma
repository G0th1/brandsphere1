generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  password_hash String
  role          String
  created_at    DateTime       @default(now()) @db.Timestamptz
  businesses    Business[]
  subscriptions Subscription[]
  usageLogs     UsageLog[]

  @@map("Users")
}

model Business {
  id            String               @id @default(uuid()) @db.Uuid
  user_id       String               @db.Uuid
  name          String
  industry      String
  created_at    DateTime             @default(now()) @db.Timestamptz
  user          User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  aiContents    AIGeneratedContent[]

  @@map("Businesses")
}

model Subscription {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  plan       String
  status     String
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Subscriptions")
}

model AIGeneratedContent {
  id           String   @id @default(uuid()) @db.Uuid
  business_id  String   @db.Uuid
  content_type String
  content      String
  created_at   DateTime @default(now()) @db.Timestamptz
  business     Business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@map("AI_Generated_Content")
}

model UsageLog {
  id           String   @id @default(uuid()) @db.Uuid
  user_id      String   @db.Uuid
  tokens_used  Int
  timestamp    DateTime @default(now()) @db.Timestamptz
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Usage_Logs")
} 