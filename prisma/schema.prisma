generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  bio           String?
  company       String?
  position      String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  securitySettings SecuritySetting?
  socialConnections SocialConnection[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String    @unique
  status       String    @default("active") 
  plan         String    @default("Free") 
  billingCycle String    @default("monthly")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Security settings for user accounts
model SecuritySetting {
  id                String   @id @default(cuid())
  userId            String   @unique
  twoFactorEnabled  Boolean  @default(false)
  loginNotifications Boolean @default(false)
  sessionTimeout    Int      @default(60) // Minutes until session expires
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Social media connections for users
model SocialConnection {
  id           String   @id @default(cuid())
  userId       String
  platform     String   // twitter, facebook, instagram, linkedin, tiktok
  profileId    String
  username     String
  accessToken  String?
  refreshToken String?
  expiry       String?
  profileUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
} 