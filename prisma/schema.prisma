generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  resetToken    PasswordResetToken?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId    String?
  stripeCurrentPeriodEnd DateTime?
  status           String   @default("inactive") // active, canceled, past_due, trialing, unpaid, inactive
  plan             String   @default("Free") // Free, Pro, Business
  billingCycle     String   @default("monthly") // monthly, annually
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageStatistics {
  id            String   @id @default(cuid())
  userId        String   @unique
  socialAccounts Int     @default(0)
  monthlyPosts  Int      @default(0)
  storageUsed   Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model PlatformConnection {
  id              String   @id @default(cuid())
  user_id         String
  platform        String   // youtube, facebook, etc.
  platform_user_id String
  access_token    String   @db.Text
  refresh_token   String   @db.Text
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@unique([user_id, platform])
} 