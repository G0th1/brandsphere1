generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  extensions = [citext, pgcrypto]
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  password_hash String
  role          String        @default("user")
  created_at    DateTime       @default(now()) @db.Timestamptz
  businesses    Business[]
  subscriptions Subscription[]
  usageLogs     UsageLog[]
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("Users")
}

model Business {
  id            String               @id @default(uuid()) @db.Uuid
  user_id       String               @db.Uuid
  name          String
  industry      String
  created_at    DateTime             @default(now()) @db.Timestamptz
  user          User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  aiContents    AIGeneratedContent[]

  @@map("Businesses")
}

model Subscription {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  plan       String   @default("Free")
  status     String   @default("active")
  start_date DateTime @default(now()) @db.Date
  end_date   DateTime @db.Date
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Subscriptions")
}

model AIGeneratedContent {
  id           String   @id @default(uuid()) @db.Uuid
  business_id  String   @db.Uuid
  content_type String
  content      String
  created_at   DateTime @default(now()) @db.Timestamptz
  business     Business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@map("AI_Generated_Content")
}

model UsageLog {
  id           String   @id @default(uuid()) @db.Uuid
  user_id      String   @db.Uuid
  tokens_used  Int
  timestamp    DateTime @default(now()) @db.Timestamptz
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Usage_Logs")
} 